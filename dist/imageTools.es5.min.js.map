{"version":3,"sources":["imageTools.js"],"names":["ImageTools","opts","_classCallCheck","this","eventsRunning","config","events","resize","scroll","attributes","elementCache","assign","matchDPR","lazyLoadThreshold","sources","setupEventListeners","getElements","_this","item","lazyLoad","canLazyLoad","chooseImage","loaded","el","offsetTop","window","scrollY","innerHeight","eventName","callback","_this2","hasOwnProperty","addEventListener","requestAnimationFrame","dispatchEvent","CustomEvent","throttleEventListener","resizeHandler","bind","scrollHandler","debug","_console","document","querySelectorAll","forEach","_this3","push","elType","tagName","toLowerCase","container","getContainerDimensions","sizes","getSizes","getAttribute","lazyLoadDefault","console","info","width","height","clientWidth","clientHeight","rImgSources","split","map","sizeEl","_sizeEl$split","_sizeEl$split2","_slicedToArray","url","parseInt","sort","a","b","devicePixelRatio","possibleSizes","filter","size","idealImage","length","style","backgroundImage","setAttribute","_this4"],"mappings":"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","file":"imageTools.es5.min.js","sourcesContent":["class ImageTools {\n    /**\n     * Constructor\n     * \n     * @param {object} opts \n     */\n    constructor(opts) {\n        this.eventsRunning = {};\n        this.elementCache = [];\n        \n        this.config = {\n            events: {\n                resize: 'imageToolsResize',\n                scroll: 'imageToolsScroll'\n            },\n            attributes: {\n                // enabled: 'data-it-enabled',\n                sources: 'data-it-sources',\n                lazyLoad: 'data-it-lazyload'\n            }\n        };\n\n        this.opts = Object.assign({\n            debug: false,\n            matchDPR: true,\n            lazyLoadDefault: false,\n            lazyLoadThreshold: 100\n        }, opts);\n        \n        this.setupEventListeners();\n        this.getElements();\n\n        this.processElementCache();\n    }\n\n    /**\n     * Loop through the current element cache and choose images\n     */\n    processElementCache() {\n        this.elementCache.forEach(item => {\n            if (item.loaded || (item.lazyLoad && !this.canLazyLoad(item))) {\n                return;\n            }\n\n            this.chooseImage(item);\n        });\n    }\n\n    /**\n     * Test if an item is lazy load-able\n     * \n     * @param {object} item \n     */\n    canLazyLoad(item) {\n        if (!item.lazyLoad || item.loaded) {\n            return false;\n        }\n\n        if (item.el.offsetTop - (window.scrollY + window.innerHeight) <= this.opts.lazyLoadThreshold) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Setup a throttled event listener\n     * \n     * @param {string} name \n     * @param {function} callback \n     */\n    throttleEventListener(eventName, callback) {\n        if (!this.eventsRunning.hasOwnProperty(eventName)) {\n            this.eventsRunning[eventName] = false;\n        }\n\n        window.addEventListener(eventName, () => {\n            if (this.eventsRunning[eventName]) {\n                return;\n            }\n\n            this.eventsRunning[eventName] = true;\n\n            requestAnimationFrame(() => {\n                window.dispatchEvent(new CustomEvent(eventName+'-throttled'));\n                this.eventsRunning[eventName] = false;\n            });\n        });\n\n        if (typeof callback == 'function') {\n            window.addEventListener(eventName+'-throttled', callback);\n        }\n    }\n\n    /**\n     * Setup and throttle event listeners -- scroll & resize\n     */\n    setupEventListeners() {\n        this.throttleEventListener('resize', this.resizeHandler.bind(this));\n        this.throttleEventListener('scroll', this.scrollHandler.bind(this));\n    }\n\n    /**\n     * Print a debug message\n     */\n    debug() {\n        if (this.opts.debug) {\n            console.log(...arguments);\n        }\n    }\n\n    /**\n     * Get all the HTML elements configured for image selection\n     */\n    getElements() {\n        this.elementCache = [];\n\n        document.querySelectorAll(`[${this.config.attributes.sources}]`).forEach((el) => {\n            this.elementCache.push({\n                el: el,\n                elType: el.tagName.toLowerCase(),\n                container: this.getContainerDimensions(el),\n                sizes: this.getSizes(el.getAttribute(this.config.attributes.sources)),\n                lazyLoad: el.getAttribute(this.config.attributes.lazyLoad) ? el.getAttribute(this.config.attributes.lazyLoad) == 'true' : this.opts.lazyLoadDefault,\n                loaded: false // FIXME: figure out a way to check if images are already loaded when this array is created\n            });\n        });\n\n        console.info(this.elementCache);\n    }\n\n    /**\n     * Get container dimensions of an HTML element\n     * \n     * @param {object} el \n     */\n    getContainerDimensions(el) {\n        const container = {\n            width: 0,\n            height: 0\n        };\n\n        switch (el.tagName.toLowerCase()) {\n            case 'div':\n            case 'img':\n                container.width = el.clientWidth;\n                container.height = el.clientHeight;\n                break;\n            \n            default:\n                break;\n        }\n\n        return container;\n    }\n\n    /**\n     * Create an array of image sizes from the \"data-it-sources\" attribute\n     * \n     * @param {string} rImgSources \n     */\n    getSizes(rImgSources) {\n        return rImgSources\n            .split(';')\n            .map(sizeEl => {\n                const [url, width, height] = sizeEl.split(',');\n                return { url: url, width: parseInt(width), height: parseInt(height) };\n            })\n            .sort((a, b) => {\n                if (a.width >= a.height) {\n                    return a.width > b.width ? 1 : -1;\n                } else {\n                    return a.height > b.height ? 1 : -1;\n                }\n            });\n    }\n\n    /**\n     * Choose the appropriate image and apply it to the element\n     * \n     * @param {object} item \n     */\n    chooseImage(item) {\n        const sizes = this.getSizes(item.el.getAttribute(this.config.attributes.sources));\n        const elType = item.el.tagName.toLowerCase();\n        \n        console.table(sizes);\n        \n        const container = this.getContainerDimensions(item.el);\n\n        if (this.opts.matchDPR) {\n            container.width *= window.devicePixelRatio;\n            container.height *= window.devicePixelRatio;\n        }\n\n        let possibleSizes = sizes.filter(function(size) {\n            return size.width >= container.width && size.height >= container.height;\n        });\n\n        let idealImage = possibleSizes.length ? possibleSizes[0] : sizes[sizes.length-1];\n\n        switch (elType) {\n            case 'div':\n                item.el.style.backgroundImage = `url('${idealImage.url}')`;\n                break;\n            \n            case 'img':\n                item.el.setAttribute('src', idealImage.url);\n                break;\n            \n            default:\n                break;\n        }\n\n        item.loaded = true;\n    }\n\n    /**\n     * Resize handler\n     */\n    resizeHandler() {\n        // update container sizes\n        this.debug('resizeHandler');\n    }\n\n    /**\n     * Scroll handler -- check for lazy load-able images\n     */\n    scrollHandler() {\n        // lazy load images\n        this.elementCache.forEach(item => {\n            if (item.loaded || (item.lazyLoad && !this.canLazyLoad(item))) {\n                return;\n            }\n\n            console.info('choosing image', item);\n            this.chooseImage(item);\n        });\n    }\n}"]}