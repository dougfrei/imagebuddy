{"version":3,"sources":["imageTools.js"],"names":["ImageTools","opts","_classCallCheck","this","eventsRunning","config","events","resize","scroll","attributes","elementCache","assign","matchDPR","lazyLoadThreshold","sources","setupEventListeners","getElements","_this","item","lazyLoad","canLazyLoad","chooseImage","loaded","el","offsetTop","window","scrollY","innerHeight","eventName","callback","_this2","hasOwnProperty","addEventListener","requestAnimationFrame","dispatchEvent","CustomEvent","throttleEventListener","resizeHandler","bind","scrollHandler","debug","_console","_console2","console","info","apply","arguments","_console3","table","document","querySelectorAll","forEach","_this3","push","elType","tagName","toLowerCase","container","getContainerDimensions","sizes","getSizes","getAttribute","lazyLoadDefault","debugInfo","width","height","clientWidth","clientHeight","rImgSources","sort","a","b","debugTable","possibleSizes","filter","size","idealImage","length","style","backgroundImage","url","setAttribute","_this4"],"mappings":"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","file":"imageTools.es5.min.js","sourcesContent":["class ImageTools {\n    /**\n     * Constructor\n     *\n     * @param {object} opts\n     */\n    constructor(opts) {\n        this.eventsRunning = {};\n        this.elementCache = [];\n\n        this.config = {\n            events: {\n                resize: 'imageToolsResize',\n                scroll: 'imageToolsScroll'\n            },\n            attributes: {\n                // enabled: 'data-it-enabled',\n                sources: 'data-it-sources',\n                lazyLoad: 'data-it-lazyload'\n            }\n        };\n\n        this.opts = Object.assign({\n            debug: false,\n            matchDPR: true,\n            lazyLoadDefault: false,\n            lazyLoadThreshold: 100\n        }, opts);\n\n        this.setupEventListeners();\n        this.getElements();\n\n        this.processElementCache();\n    }\n\n    /**\n     * Loop through the current element cache and choose images\n     */\n    processElementCache() {\n        this.elementCache.forEach(item => {\n            if (item.loaded || (item.lazyLoad && !this.canLazyLoad(item))) {\n                return;\n            }\n\n            this.chooseImage(item);\n        });\n    }\n\n    /**\n     * Test if an item is lazy load-able\n     *\n     * @param {object} item\n     */\n    canLazyLoad(item) {\n        if (!item.lazyLoad || item.loaded) {\n            return false;\n        }\n\n        if (item.el.offsetTop - (window.scrollY + window.innerHeight) <= this.opts.lazyLoadThreshold) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Setup a throttled event listener\n     *\n     * @param {string} name\n     * @param {function} callback\n     */\n    throttleEventListener(eventName, callback) {\n        if (!this.eventsRunning.hasOwnProperty(eventName)) {\n            this.eventsRunning[eventName] = false;\n        }\n\n        window.addEventListener(eventName, () => {\n            if (this.eventsRunning[eventName]) {\n                return;\n            }\n\n            this.eventsRunning[eventName] = true;\n\n            requestAnimationFrame(() => {\n                window.dispatchEvent(new CustomEvent(eventName+'-throttled'));\n                this.eventsRunning[eventName] = false;\n            });\n        });\n\n        if (typeof callback == 'function') {\n            window.addEventListener(eventName+'-throttled', callback);\n        }\n    }\n\n    /**\n     * Setup and throttle event listeners -- scroll & resize\n     */\n    setupEventListeners() {\n        this.throttleEventListener('resize', this.resizeHandler.bind(this));\n        this.throttleEventListener('scroll', this.scrollHandler.bind(this));\n    }\n\n    /**\n     * Print a debug message\n     */\n    debug() {\n        if (this.opts.debug) {\n\t\t\tconsole.log(...arguments);\n        }\n    }\n\t\n\tdebugInfo() {\n\t\tif (this.opts.debug) {\n\t\t\tconsole.info(...arguments);\n\t\t}\n\t}\n\n\tdebugTable() {\n\t\tif (this.opts.debug) {\n\t\t\tconsole.table(...arguments);\n\t\t}\n\t}\n\n    /**\n     * Get all the HTML elements configured for image selection\n     */\n    getElements() {\n        this.elementCache = [];\n\n        document.querySelectorAll(`[${this.config.attributes.sources}]`).forEach((el) => {\n            this.elementCache.push({\n                el: el,\n                elType: el.tagName.toLowerCase(),\n                container: this.getContainerDimensions(el),\n                sizes: this.getSizes(el.getAttribute(this.config.attributes.sources)),\n                lazyLoad: el.getAttribute(this.config.attributes.lazyLoad) ? el.getAttribute(this.config.attributes.lazyLoad) == 'true' : this.opts.lazyLoadDefault,\n                loaded: false // FIXME: figure out a way to check if images are already loaded when this array is created\n            });\n        });\n\n        this.debugInfo(this.elementCache);\n    }\n\n    /**\n     * Get container dimensions of an HTML element\n     *\n     * @param {object} el\n     */\n    getContainerDimensions(el) {\n        const container = {\n            width: 0,\n            height: 0\n        };\n\n        switch (el.tagName.toLowerCase()) {\n            case 'div':\n            case 'img':\n                container.width = el.clientWidth;\n                container.height = el.clientHeight;\n                break;\n\n            default:\n                break;\n        }\n\n        return container;\n    }\n\n    /**\n     * Create an array of image sizes from the \"data-it-sources\" attribute\n     *\n     * @param {string} rImgSources\n     */\n    getSizes(rImgSources) {\n        return rImgSources\n            .split(';')\n            .map(sizeEl => {\n                const [url, width, height] = sizeEl.split(',');\n                return { url: url, width: parseInt(width), height: parseInt(height) };\n            })\n            .sort((a, b) => {\n                if (a.width >= a.height) {\n                    return a.width > b.width ? 1 : -1;\n                } else {\n                    return a.height > b.height ? 1 : -1;\n                }\n            });\n    }\n\n    /**\n     * Choose the appropriate image and apply it to the element\n     *\n     * @param {object} item\n     */\n    chooseImage(item) {\n        const sizes = this.getSizes(item.el.getAttribute(this.config.attributes.sources));\n        const elType = item.el.tagName.toLowerCase();\n\n\t\tthis.debugTable(sizes);\n\n        const container = this.getContainerDimensions(item.el);\n\n        if (this.opts.matchDPR) {\n            container.width *= window.devicePixelRatio;\n            container.height *= window.devicePixelRatio;\n        }\n\n        let possibleSizes = sizes.filter(function(size) {\n            return size.width >= container.width && size.height >= container.height;\n        });\n\n        let idealImage = possibleSizes.length ? possibleSizes[0] : sizes[sizes.length-1];\n\n        switch (elType) {\n            case 'div':\n                item.el.style.backgroundImage = `url('${idealImage.url}')`;\n                break;\n\n            case 'img':\n                item.el.setAttribute('src', idealImage.url);\n                break;\n\n            default:\n                break;\n        }\n\n        item.loaded = true;\n    }\n\n    /**\n     * Resize handler\n     */\n    resizeHandler() {\n        // update container sizes\n        this.debug('resizeHandler');\n    }\n\n    /**\n     * Scroll handler -- check for lazy load-able images\n     */\n    scrollHandler() {\n        // lazy load images\n        this.elementCache.forEach(item => {\n            if (item.loaded || (item.lazyLoad && !this.canLazyLoad(item))) {\n                return;\n            }\n\n            // this.debugInfo('choosing image', item);\n            this.chooseImage(item);\n        });\n    }\n}\n"]}